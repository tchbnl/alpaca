#!/usr/bin/env bash
# alpaca: Simple log parser for Apache domlogs
# Nathan P. <me@tchbnl.net>
# 0.3b
set -euo pipefail

# Version information
VERSION='0.3b'

# Nice text formatting options
TEXT_BOLD='\e[1m'
TEXT_UNSET='\e[0m'

# Format for the date command. Default is 'DD/Mon/YYY:HH:SS w/ timezone offset'.
# DATE_RANGE defaults to 24 hours, but can be changed with --date/-d
# We convert the months in the log to numbers for more robust sorting
DATE_FORMAT='%d/%b/%Y:%H:%m:%S'
DATE_RANGE='24 hours ago'

# Log positions
# Change these if using a freaky log format
# Original LogFormat used:
# %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"
# In the future I might try to be more clever and pull from LogFormat directly
POS_IP=1
POS_REQUEST=2
POS_UA=6

# Help message
show_help() {
    cat << END_OF_HELP
$(echo -e "${TEXT_BOLD}")alpaca:$(echo -e "${TEXT_UNSET}") Simple log parser for Apache domlogs

USAGE: alpaca LOG
    --date -d           Specify an alternate time range (ex: "12 hours ago")
    --help -h           Show this message
    --version -v        Show version information
END_OF_HELP
}

# Fetch and parse the log file
fetch_entries() {
    echo "Getting results from ${*}..."
    echo

    # We use the date command to get our times
    # You can use -date/-d to specify a different range (ex: 48 hours ago)
    date_start="$(date -d "${DATE_RANGE}" "+${DATE_FORMAT}")"
    date_now="$(date "+${DATE_FORMAT}")"

    # Get the last X entries and the total count for further user
    # What the heck is this sed about? We need to convert our months into
    # numbers so the awk comparison works.
    entries="$(sed -E 's/\[([0-9]{2})\/Jan\//\[\1\/01\//g;
                       s/\[([0-9]{2})\/Feb\//\[\1\/02\//g;
                       s/\[([0-9]{2})\/Mar\//\[\1\/03\//g;
                       s/\[([0-9]{2})\/Apr\//\[\1\/04\//g;
                       s/\[([0-9]{2})\/May\//\[\1\/05\//g;
                       s/\[([0-9]{2})\/Jun\//\[\1\/06\//g;
                       s/\[([0-9]{2})\/Jul\//\[\1\/07\//g;
                       s/\[([0-9]{2})\/Aug\//\[\1\/08\//g;
                       s/\[([0-9]{2})\/Sep\//\[\1\/09\//g;
                       s/\[([0-9]{2})\/Oct\//\[\1\/10\//g;
                       s/\[([0-9]{2})\/Nov\//\[\1\/11\//g;
                       s/\[([0-9]{2})\/Dec\//\[\1\/12\//g' "${@}" | \
        awk -F '[][]' -v start="${date_start}" -v now="${date_now}" \
        '$2 >= start && $2 <= now')"

    if [[ -z "${entries}" ]]; then
        echo 'No entries found in this date range.'
        exit 1
    fi

    entries_total="$(echo "${entries}" | wc -l)"

    # Hits Per Hour in the future would be better
    echo -e "🎯 ${TEXT_BOLD}Total Requests:${TEXT_UNSET} ${entries_total}"

    # Top 10 requested URIs
    echo
    echo -e "🔗 ${TEXT_BOLD}URIs:${TEXT_UNSET}"

    # Get our URIs
    echo "${entries}" \
        | awk -F '"' -v POS_REQUEST="${POS_REQUEST}" '{print $POS_REQUEST}' \
        | awk '{print "\"" $0 "\""}' \
        | sort | uniq -c | sort -rn | head -n 10

    # Top 10 user agents
    echo
    echo -e "🧔 ${TEXT_BOLD}User Agents:${TEXT_UNSET}"

    # Get our UAs
    echo "${entries}" \
        | awk -F '"' -v POS_UA="${POS_UA}" '{print "\"" $POS_UA "\""}' \
        | sort | uniq -c | sort -rn | head -n 10

    # Top 10 IPs (and their RDNS!)
    echo
    echo -e "🌐 ${TEXT_BOLD}IPs:${TEXT_UNSET}"

    # Get our IPs
    top_ips="$(echo "${entries}" \
        | awk -v POS_IP="${POS_IP}" '{print $POS_IP}' \
        | sort | uniq -c | sort -rn | head -n 10)"

    # Freaky stuff here to iterate each IP for its PTR record
    echo "${top_ips}" | while IFS= read -r ip; do
        ip_address="$(echo "${ip}" | awk '{print $2}')"

        # Dig the IP for its PTR record
        rdns="$(dig -x "${ip_address}" +short | sed 's/\.$//')"

        # And if there's no results from dig...
        if [[ -z "${rdns}" ]]; then
            rdns='No PTR record found'
        fi

        # Tada! Top IPs with a side of RDNS.
        echo "${ip} (${rdns})"
    done
}

# Command options
while [[ "${#}" -gt 0 ]]; do
    case "${1}" in
        --help | -h)
            show_help
            exit 0 ;;

        --version | -v)
            echo -e "${TEXT_BOLD}alpaca${TEXT_UNSET} ${VERSION}"
            exit 0 ;;

        --date | -d)
            DATE_RANGE="${2}"
            shift
            shift ;;

        -*)
            echo -e "Not sure what ${1} is supposed to mean..."
            echo
            show_help
            exit 1 ;;

        *)
            break ;;
    esac
done

# For some reason dig isn't always installed on web servers...
if ! command -v dig >/dev/null; then
    echo -e "${TEXT_BOLD}alpaca${TEXT_UNSET} requires the dig command"
    exit 1
fi

# Show help message and exit if no arguments (like a log path) were passed
if [[ "${#}" -eq 0 ]]; then
    show_help
    exit 1
fi

# Get our file from the user
# TODO: Allow piping in files too?
file="${1}"

# And then check if the log file passed exists and has content
if [[ ! -e "${file}" ]] || [[ ! -s "${file}" ]]; then
    echo "File doesn't exist or appears to be empty."
    exit 1
fi

# And then pass the valid file to FUNCTION if it's valid. Valid.
fetch_entries "${file}"
