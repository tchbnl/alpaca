alpaca() {
set -euo pipefail
VERSION='0.1a "Toblerone"'
TEXT_BOLD='\e[1m'
TEXT_UNSET='\e[0m'
DATE_FORMAT='%d/%b/%Y:%H:%M:%S %z'
DATE_RANGE='24 hours ago'
POS_IP=1
POS_REQUEST=2
POS_UA=6
show_help() {
cat << END_OF_HELP
$(echo -e "${TEXT_BOLD}")alpaca:$(echo -e "${TEXT_UNSET}") Simple log parser for Apache domlogs
USAGE: alpaca LOG
--date -d           Specify an alternate time range (ex: "12 hours ago")
--help -h           Show this message
--version -v        Show version information
END_OF_HELP
}
fetch_entries() {
echo "Getting results from ${*}..."
date_time="$(date -d "${DATE_RANGE}" "+${DATE_FORMAT}")"
entries="$(awk -F '[][]' -v date="${date_time}" '$2 >= date' "${@}")"
entries_total="$(echo "${entries}" | wc -l)"
echo
echo -e "🎯 ${TEXT_BOLD}Total Requests:${TEXT_UNSET} ${entries_total}"
echo
echo -e "🔗 ${TEXT_BOLD}URIs:${TEXT_UNSET}"
echo "${entries}" \
| awk -F '"' -v POS_REQUEST="${POS_REQUEST}" '{print $POS_REQUEST}' \
| grep -E '^(GET|POST)' | awk '{print "\"" $0 "\""}' \
| sort | uniq -c | sort -rn | head -n 10
echo
echo -e "🧔 ${TEXT_BOLD}User Agents:${TEXT_UNSET}"
echo "${entries}" \
| awk -F '"' -v POS_UA="${POS_UA}" '{print "\"" $POS_UA "\""}' \
| sort | uniq -c | sort -rn | head -n 10
echo
echo -e "🌐 ${TEXT_BOLD}IPs:${TEXT_UNSET}"
top_ips="$(echo "${entries}" \
| awk -v POS_IP="${POS_IP}" '{print $POS_IP}' \
| sort | uniq -c | sort -rn | head -n 10)"
echo "${top_ips}" | while IFS= read -r ip; do
ip_address="$(echo "${ip}" | awk '{print $2}')"
rdns="$(dig -x "${ip_address}" +short | sed 's/\.$//')"
if [[ -z "${rdns}" ]]; then
rdns='No PTR record found'
fi
echo "${ip} (${rdns})"
done
}
while [[ "${#}" -gt 0 ]]; do
case "${1}" in
--help | -h)
show_help
return 0 ;;
--version | -v)
echo -e "${TEXT_BOLD}alpaca${TEXT_UNSET} ${VERSION}"
return 0 ;;
--date | -d)
DATE_RANGE="${2}"
shift
shift ;;
-*)
echo -e "Not sure what ${1} is supposed to mean..."
echo
show_help
return 1 ;;
*)
break ;;
esac
done
if ! command -v dig >/dev/null; then
echo -e "${TEXT_BOLD}alpaca${TEXT_UNSET} requires the dig command"
return 1
fi
if [[ "${#}" -eq 0 ]]; then
show_help
return 1
fi
file="${1}"
if [[ ! -e "${file}" ]] || [[ ! -s "${file}" ]]; then
echo "File doesn't exist or appears to be empty."
return 1
fi
fetch_entries "${file}"
}
